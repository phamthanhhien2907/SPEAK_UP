import authReducer from "/src/stores/reducers/authReducer.ts";
import { combineReducers } from "/node_modules/.vite/deps/redux.js?v=0c9c095f";
import __vite__cjsImport2_reduxPersist_lib_storage from "/node_modules/.vite/deps/redux-persist_lib_storage.js?v=47b71f63"; const storage = __vite__cjsImport2_reduxPersist_lib_storage.__esModule ? __vite__cjsImport2_reduxPersist_lib_storage.default : __vite__cjsImport2_reduxPersist_lib_storage;
import __vite__cjsImport3_reduxPersist_lib_stateReconciler_autoMergeLevel2 from "/node_modules/.vite/deps/redux-persist_lib_stateReconciler_autoMergeLevel2.js?v=ef41fbf4"; const autoMergeLevel2 = __vite__cjsImport3_reduxPersist_lib_stateReconciler_autoMergeLevel2.__esModule ? __vite__cjsImport3_reduxPersist_lib_stateReconciler_autoMergeLevel2.default : __vite__cjsImport3_reduxPersist_lib_stateReconciler_autoMergeLevel2;
import { persistReducer } from "/node_modules/.vite/deps/redux-persist.js?v=95e017db";
import userReducer from "/src/stores/reducers/userReducer.ts";
const commonConfig = {
    storage,
    stateReconciler: autoMergeLevel2
};
const authConfig = {
    ...commonConfig,
    key: "auth",
    whitelist: [
        "current",
        "token",
        "isLoggedIn"
    ]
};
const rootReducer = combineReducers({
    auth: persistReducer(authConfig, authReducer),
    user: userReducer
});
export default rootReducer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvb3RSZWR1Y2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhdXRoUmVkdWNlciwgeyBBdXRoU3RhdGUgfSBmcm9tIFwiLi9hdXRoUmVkdWNlclwiO1xyXG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHN0b3JhZ2UgZnJvbSBcInJlZHV4LXBlcnNpc3QvbGliL3N0b3JhZ2VcIjtcclxuaW1wb3J0IGF1dG9NZXJnZUxldmVsMiBmcm9tIFwicmVkdXgtcGVyc2lzdC9saWIvc3RhdGVSZWNvbmNpbGVyL2F1dG9NZXJnZUxldmVsMlwiO1xyXG5pbXBvcnQgeyBwZXJzaXN0UmVkdWNlciB9IGZyb20gXCJyZWR1eC1wZXJzaXN0XCI7XHJcbmltcG9ydCB1c2VyUmVkdWNlciBmcm9tIFwiLi91c2VyUmVkdWNlclwiO1xyXG5cclxuY29uc3QgY29tbW9uQ29uZmlnID0ge1xyXG4gIHN0b3JhZ2UsXHJcbiAgc3RhdGVSZWNvbmNpbGVyOiBhdXRvTWVyZ2VMZXZlbDIsXHJcbn07XHJcbmNvbnN0IGF1dGhDb25maWcgPSB7XHJcbiAgLi4uY29tbW9uQ29uZmlnLFxyXG4gIGtleTogXCJhdXRoXCIsXHJcbiAgd2hpdGVsaXN0OiBbXCJjdXJyZW50XCIsIFwidG9rZW5cIiwgXCJpc0xvZ2dlZEluXCJdLFxyXG59O1xyXG5jb25zdCByb290UmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgYXV0aDogcGVyc2lzdFJlZHVjZXI8QXV0aFN0YXRlPihhdXRoQ29uZmlnLCBhdXRoUmVkdWNlciksXHJcbiAgdXNlcjogdXNlclJlZHVjZXIsXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCByb290UmVkdWNlcjtcclxuIl0sIm5hbWVzIjpbImF1dGhSZWR1Y2VyIiwiY29tYmluZVJlZHVjZXJzIiwic3RvcmFnZSIsImF1dG9NZXJnZUxldmVsMiIsInBlcnNpc3RSZWR1Y2VyIiwidXNlclJlZHVjZXIiLCJjb21tb25Db25maWciLCJzdGF0ZVJlY29uY2lsZXIiLCJhdXRoQ29uZmlnIiwia2V5Iiwid2hpdGVsaXN0Iiwicm9vdFJlZHVjZXIiLCJhdXRoIiwidXNlciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsaUJBQWdDLGdCQUFnQjtBQUN2RCxTQUFTQyxlQUFlLFFBQVEsUUFBUTtBQUN4QyxPQUFPQyxhQUFhLDRCQUE0QjtBQUNoRCxPQUFPQyxxQkFBcUIsb0RBQW9EO0FBQ2hGLFNBQVNDLGNBQWMsUUFBUSxnQkFBZ0I7QUFDL0MsT0FBT0MsaUJBQWlCLGdCQUFnQjtBQUV4QyxNQUFNQyxlQUFlO0lBQ25CSjtJQUNBSyxpQkFBaUJKO0FBQ25CO0FBQ0EsTUFBTUssYUFBYTtJQUNqQixHQUFHRixZQUFZO0lBQ2ZHLEtBQUs7SUFDTEMsV0FBVztRQUFDO1FBQVc7UUFBUztLQUFhO0FBQy9DO0FBQ0EsTUFBTUMsY0FBY1YsZ0JBQWdCO0lBQ2xDVyxNQUFNUixlQUEwQkksWUFBWVI7SUFDNUNhLE1BQU1SO0FBQ1I7QUFDQSxlQUFlTSxZQUFZIn0=