import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import __vite__cjsImport1_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=66a6335f"; const _jsxDEV = __vite__cjsImport1_react_jsxDevRuntime["jsxDEV"];
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/node_modules/.vite/deps/react.js?v=f560a6f9"; const React = ((m) => m?.__esModule ? m : { ...typeof m === "object" && !Array.isArray(m) || typeof m === "function" ? m : {}, default: m })(__vite__cjsImport2_react);
import { flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable } from "/node_modules/.vite/deps/@tanstack_react-table.js?v=be52afe0";
import { ChevronDown } from "/node_modules/.vite/deps/lucide-react.js?v=e8ebe34d";
import { Button } from "/src/components/ui/button.tsx";
import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from "/src/components/ui/dropdown-menu.tsx";
import { Input } from "/src/components/ui/input.tsx";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "/src/components/ui/table.tsx";
import { getColumns } from "/src/components/tables/exercise-vocabulary/columns.tsx";
import { useModal } from "/src/hooks/use-model-store.ts";
import { apiGetAllExerciseVocabulary } from "/src/services/excercise-vocabulary.services.ts";
export function ExcerciseVocabularyTable() {
    _s();
    const { onOpen } = useModal();
    const columns = React.useMemo(()=>getColumns(onOpen), [
        onOpen
    ]);
    const [excerciseVocabulary, setExcerciseVocabulary] = React.useState([]);
    const [sorting, setSorting] = React.useState([]);
    const [columnFilters, setColumnFilters] = React.useState([]);
    const [columnVisibility, setColumnVisibility] = React.useState({});
    const [rowSelection, setRowSelection] = React.useState({});
    const table = useReactTable({
        data: excerciseVocabulary,
        columns,
        onSortingChange: setSorting,
        onColumnFiltersChange: setColumnFilters,
        getCoreRowModel: getCoreRowModel(),
        getPaginationRowModel: getPaginationRowModel(),
        getSortedRowModel: getSortedRowModel(),
        getFilteredRowModel: getFilteredRowModel(),
        onColumnVisibilityChange: setColumnVisibility,
        onRowSelectionChange: setRowSelection,
        state: {
            sorting,
            columnFilters,
            columnVisibility,
            rowSelection
        },
        initialState: {
            pagination: {
                pageSize: 5
            }
        }
    });
    const getAllExcerciseVocabulary = async ()=>{
        const excerciseVocabulary = await apiGetAllExerciseVocabulary();
        if (excerciseVocabulary.data.success) {
            setExcerciseVocabulary(excerciseVocabulary.data.rs);
        } else {
            console.log("Failed to fetch excercise vocabulary");
        }
    };
    React.useEffect(()=>{
        getAllExcerciseVocabulary();
    }, []);
    return /*#__PURE__*/ _jsxDEV("div", {
        className: "w-full shadow-lg drop-shadow-lg ",
        children: [
            /*#__PURE__*/ _jsxDEV("div", {
                className: "flex items-center py-4 justify-between",
                children: [
                    /*#__PURE__*/ _jsxDEV(Input, {
                        placeholder: "Filter by word...",
                        value: table.getColumn("vocabularyId.word")?.getFilterValue() ?? "",
                        onChange: (event)=>table.getColumn("vocabularyId.word")?.setFilterValue(event.target.value),
                        className: "max-w-sm"
                    }, void 0, false, {
                        fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                        lineNumber: 87,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDEV("div", {
                        onClick: ()=>onOpen("createExerciseVocabulary"),
                        className: "flex items-center space-x-2",
                        children: [
                            /*#__PURE__*/ _jsxDEV(Button, {
                                className: "bg-blue-500 hover:bg-blue-700 text-white rounded-[4px]",
                                children: "Add new exercise vocabulary"
                            }, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                lineNumber: 105,
                                columnNumber: 11
                            }, this),
                            /*#__PURE__*/ _jsxDEV(DropdownMenu, {
                                children: [
                                    /*#__PURE__*/ _jsxDEV(DropdownMenuTrigger, {
                                        asChild: true,
                                        children: /*#__PURE__*/ _jsxDEV(Button, {
                                            variant: "outline",
                                            className: "ml-auto",
                                            children: [
                                                "Columns ",
                                                /*#__PURE__*/ _jsxDEV(ChevronDown, {}, void 0, false, {
                                                    fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                                    lineNumber: 111,
                                                    columnNumber: 25
                                                }, this)
                                            ]
                                        }, void 0, true, {
                                            fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                            lineNumber: 110,
                                            columnNumber: 15
                                        }, this)
                                    }, void 0, false, {
                                        fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                        lineNumber: 109,
                                        columnNumber: 13
                                    }, this),
                                    /*#__PURE__*/ _jsxDEV(DropdownMenuContent, {
                                        align: "end",
                                        children: table.getAllColumns().filter((column)=>column.getCanHide()).map((column)=>{
                                            return /*#__PURE__*/ _jsxDEV(DropdownMenuCheckboxItem, {
                                                className: "capitalize",
                                                checked: column.getIsVisible(),
                                                onCheckedChange: (value)=>column.toggleVisibility(!!value),
                                                children: column.id
                                            }, column.id, false, {
                                                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                                lineNumber: 120,
                                                columnNumber: 21
                                            }, this);
                                        })
                                    }, void 0, false, {
                                        fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                        lineNumber: 114,
                                        columnNumber: 13
                                    }, this)
                                ]
                            }, void 0, true, {
                                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                lineNumber: 108,
                                columnNumber: 11
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                        lineNumber: 101,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                lineNumber: 86,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV("div", {
                className: "rounded-md border",
                children: /*#__PURE__*/ _jsxDEV(Table, {
                    className: "equal-widths",
                    children: [
                        /*#__PURE__*/ _jsxDEV(TableHeader, {
                            children: table.getHeaderGroups().map((headerGroup)=>/*#__PURE__*/ _jsxDEV(TableRow, {
                                    children: headerGroup.headers.map((header)=>{
                                        return /*#__PURE__*/ _jsxDEV(TableHead, {
                                            children: header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())
                                        }, header.id, false, {
                                            fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                            lineNumber: 143,
                                            columnNumber: 21
                                        }, this);
                                    })
                                }, headerGroup.id, false, {
                                    fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                    lineNumber: 140,
                                    columnNumber: 15
                                }, this))
                        }, void 0, false, {
                            fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                            lineNumber: 138,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ _jsxDEV(TableBody, {
                            children: table.getRowModel().rows?.length ? table.getRowModel().rows.map((row)=>/*#__PURE__*/ _jsxDEV(TableRow, {
                                    "data-state": row.getIsSelected() && "selected",
                                    children: row.getVisibleCells().map((cell)=>/*#__PURE__*/ _jsxDEV(TableCell, {
                                            children: flexRender(cell.column.columnDef.cell, cell.getContext())
                                        }, cell.id, false, {
                                            fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                            lineNumber: 164,
                                            columnNumber: 21
                                        }, this))
                                }, row.id, false, {
                                    fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                    lineNumber: 159,
                                    columnNumber: 17
                                }, this)) : /*#__PURE__*/ _jsxDEV(TableRow, {
                                children: /*#__PURE__*/ _jsxDEV(TableCell, {
                                    colSpan: columns.length,
                                    className: "h-24 text-center",
                                    children: "No results."
                                }, void 0, false, {
                                    fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                    lineNumber: 175,
                                    columnNumber: 17
                                }, this)
                            }, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                lineNumber: 174,
                                columnNumber: 15
                            }, this)
                        }, void 0, false, {
                            fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                            lineNumber: 156,
                            columnNumber: 11
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                    lineNumber: 137,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                lineNumber: 136,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV("div", {
                className: "flex items-center justify-end space-x-2 py-4",
                children: [
                    /*#__PURE__*/ _jsxDEV("div", {
                        className: "flex-1 text-sm text-muted-foreground",
                        children: [
                            table.getFilteredSelectedRowModel().rows.length,
                            " of",
                            " ",
                            table.getFilteredRowModel().rows.length,
                            " row(s) selected."
                        ]
                    }, void 0, true, {
                        fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                        lineNumber: 187,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDEV("div", {
                        className: "space-x-2",
                        children: [
                            /*#__PURE__*/ _jsxDEV(Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: ()=>table.previousPage(),
                                disabled: !table.getCanPreviousPage(),
                                children: "Previous"
                            }, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                lineNumber: 192,
                                columnNumber: 11
                            }, this),
                            /*#__PURE__*/ _jsxDEV(Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: ()=>table.nextPage(),
                                disabled: !table.getCanNextPage(),
                                children: "Next"
                            }, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                                lineNumber: 200,
                                columnNumber: 11
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                        lineNumber: 191,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
                lineNumber: 186,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx",
        lineNumber: 85,
        columnNumber: 5
    }, this);
}
_s(ExcerciseVocabularyTable, "12342Ok7pfftUiehUbKDE7jfB5U=", false, function() {
    return [
        useModal,
        useReactTable
    ];
});
_c = ExcerciseVocabularyTable;
var _c;
$RefreshReg$(_c, "ExcerciseVocabularyTable");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/DATN/client/src/components/tables/exercise-vocabulary/exercise-vocabulary-table.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,