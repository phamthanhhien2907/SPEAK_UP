import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=66a6335f"; const _jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import { Edit, Trash } from "/node_modules/.vite/deps/lucide-react.js?v=e8ebe34d";
import { Button } from "/src/components/ui/button.tsx";
import { Checkbox } from "/src/components/ui/checkbox.tsx";
export const getColumns = (onOpen)=>[
        {
            id: "select",
            header: ({ table })=>/*#__PURE__*/ _jsxDEV(Checkbox, {
                    checked: table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false,
                    onCheckedChange: (value)=>table.toggleAllPageRowsSelected(!!value),
                    "aria-label": "Select all"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 16,
                    columnNumber: 7
                }, this),
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV(Checkbox, {
                    checked: row.getIsSelected(),
                    onCheckedChange: (value)=>row.toggleSelected(!!value),
                    "aria-label": "Select row"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 29,
                    columnNumber: 7
                }, this),
            enableSorting: false,
            enableHiding: false
        },
        {
            accessorKey: "userId.email",
            id: "userId.email",
            header: "User Email Title",
            cell: ({ row })=>{
                const user = row.original.userId;
                return /*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: user?.email || "N/A"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 44,
                    columnNumber: 14
                }, this);
            }
        },
        {
            accessorKey: "lessonId.title",
            id: "lessonId.title",
            header: "Lesson Title",
            cell: ({ row })=>{
                const lesson = row.original.lessonId;
                return /*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: lesson?.title || "N/A"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 53,
                    columnNumber: 14
                }, this);
            }
        },
        {
            accessorKey: "exerciseId.prompt",
            id: "exerciseId.prompt",
            header: "Exercise Prompt",
            cell: ({ row })=>{
                const exercise = row.original.exerciseId;
                return /*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: exercise?.prompt || "N/A"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 62,
                    columnNumber: 14
                }, this);
            }
        },
        {
            accessorKey: "attempts",
            header: "Attempts",
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: row.getValue("attempts")
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 69,
                    columnNumber: 7
                }, this)
        },
        {
            accessorKey: "lastAttemptAt",
            header: "Last Attempt At",
            cell: ({ row })=>{
                const date = row.getValue("lastAttemptAt");
                // const formattedDate = date
                //   ? new Date(date).toLocaleString("vi-VN", {
                //       day: "2-digit",
                //       month: "2-digit",
                //       year: "numeric",
                //       hour: "2-digit",
                //       minute: "2-digit",
                //       second: "2-digit",
                //     })
                //   : "N/A";
                const formattedDate = new Date(date).toISOString().split("T")[0];
                return /*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: formattedDate
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 88,
                    columnNumber: 14
                }, this);
            }
        },
        {
            id: "actions",
            header: "Actions",
            enableHiding: false,
            cell: ({ row })=>{
                const history = row.original;
                return /*#__PURE__*/ _jsxDEV("div", {
                    className: "flex items-center gap-2",
                    children: [
                        /*#__PURE__*/ _jsxDEV(Button, {
                            onClick: ()=>onOpen("editHistory", {
                                    history
                                }),
                            className: "bg-blue-600 hover:bg-blue-700 text-white rounded-[4px]",
                            children: /*#__PURE__*/ _jsxDEV(Edit, {}, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                                lineNumber: 104,
                                columnNumber: 13
                            }, this)
                        }, void 0, false, {
                            fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                            lineNumber: 100,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ _jsxDEV(Button, {
                            onClick: ()=>onOpen("deleteHistory", {
                                    history
                                }),
                            className: "bg-red-500 hover:bg-red-700 text-white rounded-[4px]",
                            children: /*#__PURE__*/ _jsxDEV(Trash, {}, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                                lineNumber: 110,
                                columnNumber: 13
                            }, this)
                        }, void 0, false, {
                            fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                            lineNumber: 106,
                            columnNumber: 11
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "D:/DATN/client/src/components/tables/histories/columns.tsx",
                    lineNumber: 99,
                    columnNumber: 9
                }, this);
            }
        }
    ];

//# sourceMappingURL=data:application/json;base64,