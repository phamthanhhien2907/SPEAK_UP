import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=66a6335f"; const _jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import { Edit, Trash } from "/node_modules/.vite/deps/lucide-react.js?v=e8ebe34d";
import { Button } from "/src/components/ui/button.tsx";
import { Checkbox } from "/src/components/ui/checkbox.tsx";
export const getColumns = (onOpen)=>[
        {
            id: "select",
            header: ({ table })=>/*#__PURE__*/ _jsxDEV(Checkbox, {
                    checked: table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false,
                    onCheckedChange: (value)=>table.toggleAllPageRowsSelected(!!value),
                    "aria-label": "Select all"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 14,
                    columnNumber: 7
                }, this),
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV(Checkbox, {
                    checked: row.getIsSelected(),
                    onCheckedChange: (value)=>row.toggleSelected(!!value),
                    "aria-label": "Select row"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 27,
                    columnNumber: 7
                }, this),
            enableSorting: false,
            enableHiding: false
        },
        {
            accessorKey: "lessonId.title",
            id: "lessonId.title",
            header: "Lesson Title",
            cell: ({ row })=>{
                const lesson = row.original.lessonId;
                return /*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: lesson?.title || "N/A"
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 42,
                    columnNumber: 14
                }, this);
            }
        },
        {
            accessorKey: "word",
            header: "Word",
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: row.getValue("word")
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 48,
                    columnNumber: 24
                }, this)
        },
        {
            accessorKey: "phonetic",
            header: "Phonetic",
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: row.getValue("phonetic")
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 54,
                    columnNumber: 7
                }, this)
        },
        {
            accessorKey: "meaning",
            header: "Meaning",
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: row.getValue("meaning")
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 61,
                    columnNumber: 7
                }, this)
        },
        {
            accessorKey: "exampleSentence",
            header: "Example Sentence",
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: row.getValue("exampleSentence")
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 68,
                    columnNumber: 7
                }, this)
        },
        {
            accessorKey: "audioUrl",
            header: "Audio Url",
            cell: ({ row })=>/*#__PURE__*/ _jsxDEV("div", {
                    className: "capitalize",
                    children: row.getValue("audioUrl")
                }, void 0, false, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 75,
                    columnNumber: 7
                }, this)
        },
        {
            id: "actions",
            header: "Actions",
            enableHiding: false,
            cell: ({ row })=>{
                const vocabulary = row.original;
                return /*#__PURE__*/ _jsxDEV("div", {
                    className: "flex items-center gap-2",
                    children: [
                        /*#__PURE__*/ _jsxDEV(Button, {
                            onClick: ()=>onOpen("editVocabulary", {
                                    vocabulary
                                }),
                            className: "bg-blue-600 hover:bg-blue-700 text-white rounded-[4px]",
                            children: /*#__PURE__*/ _jsxDEV(Edit, {}, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                                lineNumber: 91,
                                columnNumber: 13
                            }, this)
                        }, void 0, false, {
                            fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                            lineNumber: 87,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ _jsxDEV(Button, {
                            onClick: ()=>onOpen("deleteVocabulary", {
                                    vocabulary
                                }),
                            className: "bg-red-500 hover:bg-red-700 text-white rounded-[4px]",
                            children: /*#__PURE__*/ _jsxDEV(Trash, {}, void 0, false, {
                                fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                                lineNumber: 97,
                                columnNumber: 13
                            }, this)
                        }, void 0, false, {
                            fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                            lineNumber: 93,
                            columnNumber: 11
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "D:/DATN/client/src/components/tables/vocabularies/columns.tsx",
                    lineNumber: 86,
                    columnNumber: 9
                }, this);
            }
        }
    ];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbHVtbnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbkRlZiB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtdGFibGVcIjtcclxuaW1wb3J0IHsgRWRpdCwgVHJhc2ggfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XHJcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9jaGVja2JveFwiO1xyXG5pbXBvcnQgeyBNb2RhbERhdGEsIE1vZGFsVHlwZSB9IGZyb20gXCJAL2hvb2tzL3VzZS1tb2RlbC1zdG9yZVwiO1xyXG5pbXBvcnQgeyBWb2NhYnVsYXJ5IH0gZnJvbSBcIkAvdHlwZXMvdm9jYWJ1bGFyeVwiO1xyXG5pbXBvcnQgeyBMZXNzb24gfSBmcm9tIFwiQC90eXBlcy9sZXNzb25cIjtcclxuZXhwb3J0IGNvbnN0IGdldENvbHVtbnMgPSAoXHJcbiAgb25PcGVuOiAodHlwZTogTW9kYWxUeXBlLCBkYXRhPzogTW9kYWxEYXRhKSA9PiB2b2lkXHJcbik6IENvbHVtbkRlZjxWb2NhYnVsYXJ5PltdID0+IFtcclxuICB7XHJcbiAgICBpZDogXCJzZWxlY3RcIixcclxuICAgIGhlYWRlcjogKHsgdGFibGUgfSkgPT4gKFxyXG4gICAgICA8Q2hlY2tib3hcclxuICAgICAgICBjaGVja2VkPXtcclxuICAgICAgICAgIHRhYmxlLmdldElzQWxsUGFnZVJvd3NTZWxlY3RlZCgpXHJcbiAgICAgICAgICAgID8gdHJ1ZVxyXG4gICAgICAgICAgICA6IHRhYmxlLmdldElzU29tZVBhZ2VSb3dzU2VsZWN0ZWQoKVxyXG4gICAgICAgICAgICA/IFwiaW5kZXRlcm1pbmF0ZVwiXHJcbiAgICAgICAgICAgIDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgb25DaGVja2VkQ2hhbmdlPXsodmFsdWUpID0+IHRhYmxlLnRvZ2dsZUFsbFBhZ2VSb3dzU2VsZWN0ZWQoISF2YWx1ZSl9XHJcbiAgICAgICAgYXJpYS1sYWJlbD1cIlNlbGVjdCBhbGxcIlxyXG4gICAgICAvPlxyXG4gICAgKSxcclxuICAgIGNlbGw6ICh7IHJvdyB9KSA9PiAoXHJcbiAgICAgIDxDaGVja2JveFxyXG4gICAgICAgIGNoZWNrZWQ9e3Jvdy5nZXRJc1NlbGVjdGVkKCl9XHJcbiAgICAgICAgb25DaGVja2VkQ2hhbmdlPXsodmFsdWUpID0+IHJvdy50b2dnbGVTZWxlY3RlZCghIXZhbHVlKX1cclxuICAgICAgICBhcmlhLWxhYmVsPVwiU2VsZWN0IHJvd1wiXHJcbiAgICAgIC8+XHJcbiAgICApLFxyXG4gICAgZW5hYmxlU29ydGluZzogZmFsc2UsXHJcbiAgICBlbmFibGVIaWRpbmc6IGZhbHNlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYWNjZXNzb3JLZXk6IFwibGVzc29uSWQudGl0bGVcIixcclxuICAgIGlkOiBcImxlc3NvbklkLnRpdGxlXCIsXHJcbiAgICBoZWFkZXI6IFwiTGVzc29uIFRpdGxlXCIsXHJcbiAgICBjZWxsOiAoeyByb3cgfSkgPT4ge1xyXG4gICAgICBjb25zdCBsZXNzb24gPSByb3cub3JpZ2luYWwubGVzc29uSWQgYXMgTGVzc29uO1xyXG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjYXBpdGFsaXplXCI+e2xlc3Nvbj8udGl0bGUgfHwgXCJOL0FcIn08L2Rpdj47XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYWNjZXNzb3JLZXk6IFwid29yZFwiLFxyXG4gICAgaGVhZGVyOiBcIldvcmRcIixcclxuICAgIGNlbGw6ICh7IHJvdyB9KSA9PiA8ZGl2IGNsYXNzTmFtZT1cImNhcGl0YWxpemVcIj57cm93LmdldFZhbHVlKFwid29yZFwiKX08L2Rpdj4sXHJcbiAgfSxcclxuICB7XHJcbiAgICBhY2Nlc3NvcktleTogXCJwaG9uZXRpY1wiLFxyXG4gICAgaGVhZGVyOiBcIlBob25ldGljXCIsXHJcbiAgICBjZWxsOiAoeyByb3cgfSkgPT4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcGl0YWxpemVcIj57cm93LmdldFZhbHVlKFwicGhvbmV0aWNcIil9PC9kaXY+XHJcbiAgICApLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYWNjZXNzb3JLZXk6IFwibWVhbmluZ1wiLFxyXG4gICAgaGVhZGVyOiBcIk1lYW5pbmdcIixcclxuICAgIGNlbGw6ICh7IHJvdyB9KSA9PiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FwaXRhbGl6ZVwiPntyb3cuZ2V0VmFsdWUoXCJtZWFuaW5nXCIpfTwvZGl2PlxyXG4gICAgKSxcclxuICB9LFxyXG4gIHtcclxuICAgIGFjY2Vzc29yS2V5OiBcImV4YW1wbGVTZW50ZW5jZVwiLFxyXG4gICAgaGVhZGVyOiBcIkV4YW1wbGUgU2VudGVuY2VcIixcclxuICAgIGNlbGw6ICh7IHJvdyB9KSA9PiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FwaXRhbGl6ZVwiPntyb3cuZ2V0VmFsdWUoXCJleGFtcGxlU2VudGVuY2VcIil9PC9kaXY+XHJcbiAgICApLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYWNjZXNzb3JLZXk6IFwiYXVkaW9VcmxcIixcclxuICAgIGhlYWRlcjogXCJBdWRpbyBVcmxcIixcclxuICAgIGNlbGw6ICh7IHJvdyB9KSA9PiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FwaXRhbGl6ZVwiPntyb3cuZ2V0VmFsdWUoXCJhdWRpb1VybFwiKX08L2Rpdj5cclxuICAgICksXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogXCJhY3Rpb25zXCIsXHJcbiAgICBoZWFkZXI6IFwiQWN0aW9uc1wiLFxyXG4gICAgZW5hYmxlSGlkaW5nOiBmYWxzZSxcclxuICAgIGNlbGw6ICh7IHJvdyB9KSA9PiB7XHJcbiAgICAgIGNvbnN0IHZvY2FidWxhcnkgPSByb3cub3JpZ2luYWw7XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25PcGVuKFwiZWRpdFZvY2FidWxhcnlcIiwgeyB2b2NhYnVsYXJ5IH0pfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJiZy1ibHVlLTYwMCBob3ZlcjpiZy1ibHVlLTcwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtWzRweF1cIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8RWRpdCAvPlxyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uT3BlbihcImRlbGV0ZVZvY2FidWxhcnlcIiwgeyB2b2NhYnVsYXJ5IH0pfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJiZy1yZWQtNTAwIGhvdmVyOmJnLXJlZC03MDAgdGV4dC13aGl0ZSByb3VuZGVkLVs0cHhdXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFRyYXNoIC8+XHJcbiAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH0sXHJcbiAgfSxcclxuXTtcclxuIl0sIm5hbWVzIjpbIkVkaXQiLCJUcmFzaCIsIkJ1dHRvbiIsIkNoZWNrYm94IiwiZ2V0Q29sdW1ucyIsIm9uT3BlbiIsImlkIiwiaGVhZGVyIiwidGFibGUiLCJjaGVja2VkIiwiZ2V0SXNBbGxQYWdlUm93c1NlbGVjdGVkIiwiZ2V0SXNTb21lUGFnZVJvd3NTZWxlY3RlZCIsIm9uQ2hlY2tlZENoYW5nZSIsInZhbHVlIiwidG9nZ2xlQWxsUGFnZVJvd3NTZWxlY3RlZCIsImFyaWEtbGFiZWwiLCJjZWxsIiwicm93IiwiZ2V0SXNTZWxlY3RlZCIsInRvZ2dsZVNlbGVjdGVkIiwiZW5hYmxlU29ydGluZyIsImVuYWJsZUhpZGluZyIsImFjY2Vzc29yS2V5IiwibGVzc29uIiwib3JpZ2luYWwiLCJsZXNzb25JZCIsImRpdiIsImNsYXNzTmFtZSIsInRpdGxlIiwiZ2V0VmFsdWUiLCJ2b2NhYnVsYXJ5Iiwib25DbGljayJdLCJtYXBwaW5ncyI6IjtBQUNBLFNBQVNBLElBQUksRUFBRUMsS0FBSyxRQUFRLGVBQWU7QUFDM0MsU0FBU0MsTUFBTSxRQUFRLHlCQUF5QjtBQUNoRCxTQUFTQyxRQUFRLFFBQVEsMkJBQTJCO0FBSXBELE9BQU8sTUFBTUMsYUFBYSxDQUN4QkMsU0FDNEI7UUFDNUI7WUFDRUMsSUFBSTtZQUNKQyxRQUFRLENBQUMsRUFBRUMsS0FBSyxFQUFFLGlCQUNoQixRQUFDTDtvQkFDQ00sU0FDRUQsTUFBTUUsd0JBQXdCLEtBQzFCLE9BQ0FGLE1BQU1HLHlCQUF5QixLQUMvQixrQkFDQTtvQkFFTkMsaUJBQWlCLENBQUNDLFFBQVVMLE1BQU1NLHlCQUF5QixDQUFDLENBQUMsQ0FBQ0Q7b0JBQzlERSxjQUFXOzs7Ozs7WUFHZkMsTUFBTSxDQUFDLEVBQUVDLEdBQUcsRUFBRSxpQkFDWixRQUFDZDtvQkFDQ00sU0FBU1EsSUFBSUMsYUFBYTtvQkFDMUJOLGlCQUFpQixDQUFDQyxRQUFVSSxJQUFJRSxjQUFjLENBQUMsQ0FBQyxDQUFDTjtvQkFDakRFLGNBQVc7Ozs7OztZQUdmSyxlQUFlO1lBQ2ZDLGNBQWM7UUFDaEI7UUFDQTtZQUNFQyxhQUFhO1lBQ2JoQixJQUFJO1lBQ0pDLFFBQVE7WUFDUlMsTUFBTSxDQUFDLEVBQUVDLEdBQUcsRUFBRTtnQkFDWixNQUFNTSxTQUFTTixJQUFJTyxRQUFRLENBQUNDLFFBQVE7Z0JBQ3BDLHFCQUFPLFFBQUNDO29CQUFJQyxXQUFVOzhCQUFjSixRQUFRSyxTQUFTOzs7Ozs7WUFDdkQ7UUFDRjtRQUNBO1lBQ0VOLGFBQWE7WUFDYmYsUUFBUTtZQUNSUyxNQUFNLENBQUMsRUFBRUMsR0FBRyxFQUFFLGlCQUFLLFFBQUNTO29CQUFJQyxXQUFVOzhCQUFjVixJQUFJWSxRQUFRLENBQUM7Ozs7OztRQUMvRDtRQUNBO1lBQ0VQLGFBQWE7WUFDYmYsUUFBUTtZQUNSUyxNQUFNLENBQUMsRUFBRUMsR0FBRyxFQUFFLGlCQUNaLFFBQUNTO29CQUFJQyxXQUFVOzhCQUFjVixJQUFJWSxRQUFRLENBQUM7Ozs7OztRQUU5QztRQUNBO1lBQ0VQLGFBQWE7WUFDYmYsUUFBUTtZQUNSUyxNQUFNLENBQUMsRUFBRUMsR0FBRyxFQUFFLGlCQUNaLFFBQUNTO29CQUFJQyxXQUFVOzhCQUFjVixJQUFJWSxRQUFRLENBQUM7Ozs7OztRQUU5QztRQUNBO1lBQ0VQLGFBQWE7WUFDYmYsUUFBUTtZQUNSUyxNQUFNLENBQUMsRUFBRUMsR0FBRyxFQUFFLGlCQUNaLFFBQUNTO29CQUFJQyxXQUFVOzhCQUFjVixJQUFJWSxRQUFRLENBQUM7Ozs7OztRQUU5QztRQUNBO1lBQ0VQLGFBQWE7WUFDYmYsUUFBUTtZQUNSUyxNQUFNLENBQUMsRUFBRUMsR0FBRyxFQUFFLGlCQUNaLFFBQUNTO29CQUFJQyxXQUFVOzhCQUFjVixJQUFJWSxRQUFRLENBQUM7Ozs7OztRQUU5QztRQUNBO1lBQ0V2QixJQUFJO1lBQ0pDLFFBQVE7WUFDUmMsY0FBYztZQUNkTCxNQUFNLENBQUMsRUFBRUMsR0FBRyxFQUFFO2dCQUNaLE1BQU1hLGFBQWFiLElBQUlPLFFBQVE7Z0JBRS9CLHFCQUNFLFFBQUNFO29CQUFJQyxXQUFVOztzQ0FDYixRQUFDekI7NEJBQ0M2QixTQUFTLElBQU0xQixPQUFPLGtCQUFrQjtvQ0FBRXlCO2dDQUFXOzRCQUNyREgsV0FBVTtzQ0FFVixjQUFBLFFBQUMzQjs7Ozs7Ozs7OztzQ0FFSCxRQUFDRTs0QkFDQzZCLFNBQVMsSUFBTTFCLE9BQU8sb0JBQW9CO29DQUFFeUI7Z0NBQVc7NEJBQ3ZESCxXQUFVO3NDQUVWLGNBQUEsUUFBQzFCOzs7Ozs7Ozs7Ozs7Ozs7O1lBSVQ7UUFDRjtLQUNELENBQUMifQ==